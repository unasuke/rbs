module RBS
  module Collection
    # This class represent the configration file.
    class Config
      class CollectionNotAvailable < StandardError
        def initialize: () -> void
      end

      class LockfileGenerator
        type lockfile_gem = { 'name' => String, 'version' => String, source: Sources::source_entry }

        type lockfile = {
          'sources' => Array[Sources::Git::source_entry],
          'path' => String,
          'gems' => Array[lockfile_gem]
        }

        attr_reader config: Config
        attr_reader bundler_definition: Bundler::Definition

        attr_reader lockfile: Lockfile
        attr_reader existing_lockfile: Lockfile?

        @gem_map: Hash[String, Bundler::LazySpecification]

        # Load a Config, generates and save Lockfile, and returns a pair of them
        #
        def self.generate: (config_path: Pathname, gemfile_lock_path: Pathname, ?with_lockfile: boolish) -> [Config, Lockfile]

        def initialize: (config_path: Pathname, bundler_definition: Bundler::Definition, with_lockfile: boolish) -> void

        def generate: () -> void

        private

        def assign_gem: (name: String, version: String?, ignored_gems: Set[String]) -> void

        def assign_stdlib: (name: String) -> void

        def each_dependent_gem: (name: String) { (Bundler::LazySpecification) -> void } -> void

        def find_source: (name: String) -> Sources::t?

        def find_best_version: (version: String?, versions: Array[String]) -> Gem::Version
      end

      PATH: Pathname

      type gem_entry = {
        'name' => String,
        'version' => String?,
        'ignore' => boolish,
        'source' => Sources::source_entry?
      }

      @config_path: Pathname

      @data: untyped

      @sources: Array[Sources::_Source]

      def self.generate_lockfile: (config_path: Pathname, gemfile_lock_path: Pathname, ?with_lockfile: boolish) -> [Config, Lockfile]

      def self.from_path: (Pathname path) -> Config

      def self.lockfile_of: (Pathname config_path) -> Lockfile?

      def self.to_lockfile_path: (Pathname config_path) -> Pathname

      # config_path is necessary to resolve relative repo_path
      def initialize: (untyped data, config_path: Pathname) -> void

      def gem: (String gem_name) -> gem_entry?

      def data_path: () -> String

      def repo_path: () -> Pathname

      def data_sources: () -> Array[Sources::Git::source_entry]

      def sources: () -> Array[Sources::_Source]

      def gems: () -> Array[gem_entry]

      def check_rbs_availability!: () -> void
    end
  end
end
